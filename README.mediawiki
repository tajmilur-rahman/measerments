==Release Stabilization on Linux and Chrome==

We've released our git extraction and release engineering mining scripts. If you have any questions, or would like us to analyze your data please email us. 

==Dependencies==

We usually run this on Ubuntu server, you'll need the following packages:

sudo apt-get install install postgresql postgresql-contrib

===Extract Data from Git===

To extract your Git data into a postgres database for additional release engineering processing, run the following scripts.

# Create a config file in git_extract/config/example.conf
# Run git_extract/git_extract.sql
# Run git_extract/git_extract.pl
# Run git_extract/git_path.pl
# Run git_extract/git_paths_canonical.pl

===Release engineering information===

# Get rid off the big commits made by bots for non-development purpose:
## delete from git_commit where subject~'^Merge\s|SVN\sUpdate|Branching\sfor' and commit not in (select commit from git_refs_tags);
## delete from git_commit where substring(author from E'^(.*)@') ~ E'^chrom|bot|release' and commit not in (select commit from git_refs_tags);
## delete from git_commit where commit not in (select commit from git_revision);
## delete from git_revision where commit not in (select commit from git_commit);
# Add date column in git_refs_tags
# Update date field with the author_dt crom git_commit
# Create table stable_releases, store the stable release dates:
## scripts/stable_releases.sql
# Set stable release durations in stable_releases table
# Create table git_commit_release
## scripts/git_commit_release.sql
# Run git DAG to traverse the git tree to collect commits targetting to a release. This will store commits corresponding to a particular release into git_commit_release table.
## Set the correct database name in the config file
## Run the command: "perl scripts/git_dag.pl scripts/config" in terminal
# Lag/Transit time information:


